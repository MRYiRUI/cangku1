软件需求说明书
1引言	2
1.1编写目的	2
1.2背景	2
1.3定义	2
1.4参考资料	2
2任务概述	2
2.1目标	2
2.2用户的特点	3
2.3假定和约束	3
3需求规定	3
3.1对功能的规定	3
3.2对性能的规定	3
3.2.1精度	3
3.2.2时间特性要求	3
3.2.3灵活性	4
3.3输人输出要求	4
3.4数据管理能力要求	4
3.5故障处理要求	4
3.6其他专门要求	5
4运行环境规定	5
4.1设备	5
4.2支持软件	5
4.3接口	5
4.4控制	5
 
软件需求说明书
1引言
1.1编写目的
保证软件开发的质量、需求的完整性与可行性，编写此文档。通过此文档，以保证需求提出者与开发人员、测试人员对需求达成共识。给使用该系统的人员观看。
1.2背景
说明：
a．	本项目名称：学生信息管理系统
b．	本项目的任务提出者：殷鹏。开发者：殷鹏、何帅、杨浩、伊瑞管。用户：学生及老师。
1.3定义
列出本文件中用到的专门术语的定义和外文首字母组词的原词组。
1.4参考资料
列出用得着的参考资料，如：
a．	本项目的经核准的计划任务书或合同、上级机关的批文；
b．	属于本项目的其他已发表的文件；
c．	本文件中各处引用的文件、资料、包括所要用到的软件开发标准。 列出这些文件资料的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。
2任务概述
2.1目标
     实现简易的学生管理系统，方便学生查询相关信息以及老师查询、修改和添加学生的相关信息，满足俩种用户的需求。
2.2用户的特点
        查询相关信息的学生以及查询、修改和添加学生的相关信息的老师。
2.3假定和约束
开发期限：5天。仅允许使用c语言及c++语言。
3需求规定 
3.1对功能的规定
用列表的方式（例如IPO表即输入、处理、输出表的形式），逐项定量和定性地叙述对软件所提出的功能要求，说明输入什么量、经怎样的处理、得到什么输出，说明软件应支持的终端数和应支持的并行操作的用户数。
3.2对性能的规定
3.2.1精度
输入、输出数据精度：字符类型
3.2.2时间特性要求
说明对于该软件的时间特性要求，如对：
a．	响应时间；
b．	更新处理时间；
c．	数据的转换和传送时间；
d．	解题时间；等的要求。
3.2.3灵活性
说明对该软件的灵活性的要求，即当需求发生某些变化时，该软件对这些变化的适应能力，如：
a．	操作方式上的变化；
b．	运行环境的变化；
c．	同其他软件的接口的变化；
d．	精度和有效时限的变化；
e．	计划的变化或改进。
对于为了提供这些灵活性而进行的专门设计的部分应该加以标明。
3.3输人输出要求
解释各输入输出数据类型，并逐项说明其媒体、格式、数值范围、精度等。对软件的数据输出及必须标明的控制输出量进行解释并举例，包括对硬拷贝报告（正常结果输出、状态输出及异常输出）以及图形或显示报告的描述。
3.4数据管理能力要求
说明需要管理的文卷和记录的个数、表和文卷的大小规模，要按可预见的增长对数据及其分量的存储要求作出估算。
3.5故障处理要求
列出可能的软件、硬件故障以及对各项性能而言所产生的后果和对故障处理的要求。
3.6其他专门要求
如用户单位对安全保密的要求，对使用方便的要求，对可维护性、可补充性、易读性、可靠性、运行环境可转换性的特殊要求等。
4运行环境规定
4.1设备
列出运行该软件所需要的硬设备。说明其中的新型设备及其专门功能，包括：
a．	处理器型号及内存容量；
b．	外存容量、联机或脱机、媒体及其存储格式，设备的型号及数量；
c．	输入及输出设备的型号和数量，联机或脱机；
d．	数据通信设备的型号和数量；
e．	功能键及其他专用硬件
4.2支持软件
Visual Studio
4.3接口
说明该软件同其他软件之间的接口、数据通信协议等。
4.4控制
说明控制该软件的运行的方法和控制信号，并说明这些控制信号的来源。

#include <Windows.h>
#include <WinNT.h>
#include<iostream>
#include<string>
#include<string.h>
#include<stdlib.h>
#include <wchar.h>
#include <stdio.h>
#include<direct.h>
wchar_t* wp = new wchar_t[9];
wchar_t* name2 = new wchar_t[15];
wchar_t* code2 = new wchar_t[15];
wchar_t* address2 = new wchar_t[15];
wchar_t* nianji2 = new wchar_t[15];
wchar_t* faculty2 = new wchar_t[15];
wchar_t* sum = new wchar_t[120];
using namespace std;
#define IDB_ONE		1000
#define IDB_TWO		3302
#define IDB_THREE	3303
#define IDB_FOUR    3304
#define IDB_FIVE    3305
#define IDB_SIX     3306
#define IDB_SEVEN   3307   //按钮ID
#define IDB_EIGHT   3308
#define IDB_NINE    3309
#define IDB_TEN     3310
#define IDB_TEN1    3311
#define IDB_TEN2    3312
#define IDB_TEN3    3313
#define IDB_TEN4    3314
#define IDB_TEN5    3315
#define IDB_TEN6    3316
#define IDB_TEN7    3317
#define IDB_TEN8    3318
#define IDB_TEN9    3319
#define IDB_TEN10   3320
#define IDB_TEN11   3321
#define IDB_TEN12   3322
#define IDB_TEN13   3323
#define IDB_TEN14   3325
#define IDB_TEN15   3326
#define IDB_TEN16   3326
#define IDB_TEN17   3327
#define IDB_TEN18   3328
#define IDB_TEN19   3329
#define IDB_TEN20   3330
#define IDB_TEN21   3331
#define IDB_TEN22   3332
#define IDB_TEN23   3333
char xxx[] = "xxxx";
char chan;
int y;
class student
{
public:

	student()
	{
		code = 1111;
		strcpy_s(name, xxx);
		strcpy_s(address, xxx);
		strcpy_s(faculty, xxx);
		strcpy_s(name, xxx);
		nianji = 0;    //构造函数，用于初始化
	}
	int code;         //学号
	char name[11];         //姓名
	char address[16];      //学籍
	char faculty[15];      //院系
	int nianji;         //年级
}stu[10];


class ids
{
public:
	ids()
	{
		id = 0;
		pass = 0;
	}
	int id;
	int pass;
}ids[100];
int i;
int code1;
char name1[11];
char address1[16];
char faculty1[15];
int nianji1;
int id1;
int pass1;

PAINTSTRUCT ps;  //全局变量


HWND CreateMain(LPCWSTR lpClassName, LPCWSTR lpWndName);
HWND Createch(LPCWSTR lpClassName, LPCWSTR lpWndName);
HWND Createc(LPCWSTR lpClassName, LPCWSTR lpWndName);

void Display(HWND hWnd);
void Message();

LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT CALLBACK chuang(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT CALLBACK er(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT CALLBACK ok(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT CALLBACK ck(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT CALLBACK cw(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);

LPCWSTR lps_cl = L"MyApp";//类名
LPCWSTR wd_text = L"学生信息管理";//窗口标题
LPCWSTR lok = L"chuang";
LPCWSTR lck = L"er";
LPCWSTR lpl = L"ok";
LPCWSTR lml = L"ck";
LPCWSTR lkl = L"cw";
HINSTANCE hg_app;//全局实例句柄

int WINAPI wWinMain(HINSTANCE hThisApp,
	HINSTANCE hPrevApp,
	LPWSTR lpCmd,
	int nShow)
{
	WNDCLASSEX wc = { };
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.hbrBackground = (HBRUSH)COLOR_WINDOW;
	wc.hInstance = hThisApp;
	wc.lpfnWndProc = (WNDPROC)WindowProc;
	wc.lpszClassName = lps_cl;
	wc.style = CS_HREDRAW | CS_VREDRAW;
	RegisterClassEx(&wc);
	HWND hwnd1 = CreateWindowEx(WS_EX_WINDOWEDGE, lps_cl, wd_text, WS_OVERLAPPEDWINDOW,
		600, 200, 800, 600, NULL, NULL, hThisApp, NULL);
	if (hwnd1 == NULL)
		return -1;
	ShowWindow(hwnd1, nShow);
	UpdateWindow(hwnd1);
	hg_app = hThisApp;

	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return 0;
}
HWND CreateMain(LPCWSTR lpClassName, LPCWSTR lpWndName)
{
	HWND hWnd = CreateWindowEx(0, lpClassName, lpWndName,
		WS_OVERLAPPEDWINDOW, 300, 200, 300, 300, NULL, NULL, hg_app, NULL);
	return hWnd;
}
HWND Createch(LPCWSTR lpClassName, LPCWSTR lpWndName)
{
	HWND hWnd = CreateWindowEx(0, lpClassName, lpWndName,
		WS_OVERLAPPEDWINDOW, 500, 500, 340, 120, NULL, NULL, hg_app, NULL);
	return hWnd;
}

HWND Createc(LPCWSTR lpClassName, LPCWSTR lpWndName)
{
	HWND hWnd = CreateWindowEx(0, lpClassName, lpWndName,
		WS_OVERLAPPEDWINDOW, 500, 500, 500, 255, NULL, NULL, hg_app, NULL);
	return hWnd;
}

